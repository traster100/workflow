"use strict";

$(document).ready(function () {

    //проверка вбиваемых символов на лету, когда вбиваем их в поле input
    $('#code').on('keyup', function () {

        var filed_string = $(this).val();

        //длина символов
        var length_symbols = filed_string.length;

        //ничего кроме латинницы и цифр
        var regexp = /^[a-zA-Z0-9]+$/i;
        if (regexp.test(filed_string)) {
            //тут код
        }

        //добавление/удаление аттрибута
        $('#check').attr('disabled', 'disabled');
        $('#check').removeAttr('disabled');

        //добавление/удаление класса
        $('#check').addClass('btn-default');
        $('#check').removeClass('btn-default');
    });

    //клик по кнопке
    $('#check').on('click', function () {

        //сама кнопка
        var button = $(this);

        //запрос к серверу
        $.post(
            'url',
            {
                'var1': 'value1',
                'var2': 'value2'
            },
            function (result) {
                console.log(result);
            });
    });

    //клик по кнопке которая появляется на странице динамически, и ее в момент загрузки еще нет
    $(document).delegate('#check', 'click', function () {
        //тут код
    });

    //клик по ссылке которая будет в будущем
    $(document).delegate('a', 'click', function () {
        //тут код
    });

    //скрол наверх или к элементу
    $('html,body').animate({scrollTop: $("input:first").offset().top - 100}, 500);
    $('#boxscroll').scrollTop(9999999);
    $('#boxscroll').scrollTop();

    $('a').click(function () {
        $('html, body').animate({
            scrollTop: $("header").offset().top
        }, 200);
        return false;
    });

    //редирект/открытие другого урла. обычно для скачивания файла
    window.location.href = 'url';

    //не давать вбивать ничего кроме цифр
    //<input type="number" onkeypress='return event.charCode >= 48 && event.charCode <= 57' >

    //не давать вбивать ничего кроме цифр. и только 6 цифр
    onkeypress='return (event.charCode >= 48 && event.charCode <= 57) && (this.value.length < 6)'

    //вопрос с подтверждением
    if (confirm('Удалить?')) {
        //тут код
    }

    //слушаем инпуты
    $('input').on('keydown', function (event) {

        //ловим Enter
        if (event.keyCode == 13) {}

        //ловим Esc
        if (event.keyCode == 27) {}

        //ловим Shift+Enter
        if (event.keyCode === 13 && event.shiftKey) {}
    });


    //слушаем селекты
    $('select').change(function (event) {});

    //генерация клика
    $('#submit').trigger('click');

    // остановить распространение события
    $('#submit').on('click', function (event) {
        event.preventDefault();
    });

    //проход по всем элементам
    $('input').each(
        function (index, element) {
            console.log($(element));
        }
    );

    //отметить все чекбокы
    $('.checkbox').prop('checked', 'checked');

    //событие на чекбоксе
    $('.check_print').on('change', function () {
        //тут код
    });

    //если нет класса - добавит, если есть - удалит
    $('a').toggleClass('active');

    //приведение к целому числу
    parseInt(new_count);

});
-----------------------------------------------------------------

Загрузка картинки с буфера обмена (либа jQuery-File-Upload)

js:
'use strict';
window.onload = function () {
    document.addEventListener('paste', handlePaste);
};
function handlePaste(e) {
    for (var i = 0; i < e.clipboardData.items.length; i++) {
        var item = e.clipboardData.items[i];
        if (item.type.indexOf("image") != -1) {
            uploadFile(item.getAsFile());
        } else {
            alert('Это не картинка');
        }
    }
}
function uploadFile(file) {
    $('#fileupload').fileupload('add', {files: file});
}

html:
<input accept='image/gif,image/jpeg,image/png,image/jpg' id='fileupload' type='file' name='files[]' data-url='/user/chat/jqueryfileupload' multiple titile='Форматы gif, jpeg, jpg, png'>

php:
  public function jqueryfileupload() {
    require APPPATH . 'libraries/UserUploadHandler.php';
    new UserUploadHandler();
  }
-----------------------------------------------------------------

Работа с localStorage

LocalStorage (только его можно надёжно использовать из всех трех LocalStorage, WebSQL, IndexedDB) - это простой способ хранения пар ключ-значение. API прост, но использование ограничено 5Мб во многих браузерах. API является синхронным, поэтому может блокировать DOM. Поддержка браузера очень хорошая. https://caniuse.com/#feat=namevalue-storage (97,51% браузеров). LocalStorage это локальное хранилище, наподобие кук, данные хранятся в браузере и не передаются на сервер при каждом запросе. LocalStorage - в Chrome, Firefox и Edge, полностью блокирует DOM, пока вы пишете данные.

<!DOCTYPE html>
<html lang='ru' style='font-size: 30px' contenteditable>
<head>
  <meta charset='UTF-8'>
  <title>чистый лист</title>
  <script type='text/javascript'>
      function myScript(body) {
          var text = body.innerHTML;
          localStorage.setItem('text', text);
      }
      window.onload = function get_body() {
          body = document.getElementsByTagName('body')[0];
          body.innerHTML = localStorage.getItem('text');
      }
  </script>
</head>
<body oninput='myScript(this)'>
</body>
</html>
-------------------------------

LocalStorage. Работа с массивом лежащим по ключу

получить значение по ключу
var imgs = localStorage.getItem('imgs');

сериализуем строку в объект
imgs = JSON.parse(imgs);

добавить новое в массив
imgs.push({'id': id, 'type': type});

сериализуем обратно
imgs = JSON.stringify(imgs);

положим обратно
localStorage.setItem('imgs', imgs);

-----------
проверка на пустоту
if (imgs) {}
ИЛИ так
if (JSON.parse(localStorage.getItem('imgs')) && JSON.parse(localStorage.getItem('imgs')).length > 0) {}

перебор массива
for (let i = 0; i < imgs.length; i++) {
    console.log(imgs[i].id);
    console.log(imgs[i].type);
}

удалим значение по ключу
localStorage.removeItem('imgs');
-----------------------------------------------------------------

event.preventDefault() - предотвращает действие по-умолчанию, которое браузер выполняет с этим событием.

event.stopPropagation() - останавливает распространения события дальше по цепочке родителей.

//перевод строки в textarea по Shift+Enter
if (event.keyCode === 13 && event.shiftKey) {
    $('#textarea').val($(this).val() + '\n');
}
-----------------------------------------------------------------

Работа с урлом браузера

1. https://domain.com/basket

window.location вернет массив:
protocol: "https:"
host: "domain.com"
hostname: "domain.com"
href: "https://domain.com/basket"
origin: "https://domain.com"
pathname: "/basket"
search: ""


2. https://domain.com/basket?address_id=1

window.location вернет массив:
protocol: "https:"
host: "domain.com"
hostname: "domain.com"
href: "https://domain.com/basket?address_id=1"
origin: "https://domain.com"
pathname: "/basket"
search: "?address_id=1"


Меняем урл браузера
history.pushState(
    null,
    null,
    window.location.origin + window.location.pathname
);