QueryBuilder

$this->db->select('field');
$this->db->select('field as field');
$this->db->select('field1, field2');
$this->db->select_sum('field');
$this->db->select(sum('field'));

$this->db->where('field', 0);
$this->db->where('field = 0');
$this->db->where(['field' => 0]);

$this->db->where_in('field', ['one', 'two']);
$this->db->where_not_in('field', ['one', 'two']);

$this->db->join('table2', 'table.id = table2.id');
$this->db->join('table2', 'table.id = table2.id', 'left');

$this->db->order_by('field');
$this->db->order_by('field', 'DESC');

$this->db->group_by('field');

$this->db->limit($count); - аналог LIMIT $count;
$this->db->limit($count, $offset); - аналог LIMIT $offset, $count;

$this->db->escape($var);

$this->db->from('table');
$query = $this->db->get('table');

$result = $query->result(); // вся выборка
$result = $query->row(); // 1 строка
$result = $query->row()->field; // 1 строка, 1 столбец
$result = $query->num_rows(); // колво строк (сначала будет выполнен запрос, потом посчитано колво строк)
$result = $this->db->count_all_results(); // колво строк (сразу посчитано колво строк)
-------------------------------------------------

Колво строк в таблице

$this->db->count_all_results('tablename');
SELECT COUNT(*) AS `numrows` FROM `tablename`
время 0.06. самый правильный вариант

$this->db->count_all('tablename');
SELECT COUNT(*) AS `numrows` FROM `tablename`
время 0.05. считает всегда без учета WHERE, просто все строки таблицы

$query = $this->db->get('tablename');
$query->num_rows();
SELECT * FROM `tablename`
время 0.62. самый медленный вариант

$query = $this->db->get('tablename');
$query->result();
SELECT * FROM `tablename`
время 1.31. выборка объектов

-------------------------------------------------

UPDATE
$this->db
->where('id', 100)
->update('table', ['field' => 0]);

установка времени NOW()
$this->db->set('created', 'NOW()', false);

установка инкремента
$this->db->set('count', 'count+1', false);

UPDATE установка инкремента
$this->db
->where('id', 100)
->set('field', 'field+1', FALSE)
->update('table');
ИЛИ
"UPDATE `table`
SET `field` = (`field` + " . $this->db->escape($field) . ")
WHERE `id` = " . $this->db->escape($field);

для UPDATE запросов, сколько рядов затронуло
$this->db->affected_rows();

UPDATE обновление построчно:
foreach ($objects as $v) {
    $this->db->where(['id' => $v->id]);
    $this->db->update('table', ['field' => 0]);
}

UPDATE обновление много строк сразу
$update_batch = [];
foreach ($objects as $v) {
    $update_batch[] = ['id' => $v->id, 'field' => 0];
}
if ($update_batch) {
    $this->db->update_batch('table', $update_batch, 'id');
}
-------------------------------------------------

INSERT
$this->db->insert('addresses', $post);

INSERT IGNORE
$str = $this->db->insert_string('addresses', $data);
$str = preg_replace("~(INSERT INTO)~isu", 'INSERT IGNORE INTO', $str);
$this->db->query($str);
return $this->db->insert_id();

DELETE
$this->db->delete('addresses', [
'id' => $id,
'users_id' => $this->user->item('id'),
]);


ОТЛАДКА
$this->db->last_query();
---------------------------------------------------------------------------------------------------

Сессии

вставить
$this->session->userdata('property');

удалить
$this->session->unset_userdata('property');

вывести всё
$this->session->all_userdata();

Получение кук
$this->input->cookie($name, $xss_clean);
второй параметр в true для очистки от XSS
---------------------------------------------------------------------------------------------------

Хелпер
Это группы функций на одну тему, в одном файле.

загрузка хелпера $this->load->helper('name_helper');
хелперы автозагружаются тут application/config/autoload.php

Библиотека
Это класс, который нужно сделать экземпляром CI и использовать как $this->mylibrary->function() для вызова методов.

загрузка модели $this->load->library('name_library');
библиотеки автозагружаются тут application/config/autoload.php

Модель
Это класс для работы с БД
загрузка модели $this->load->model('model_faq');
---------------------------------------------------------------------------------------------------

Кеширование

включить для запроса
$this->db->cache_on();
$query = $this->db->query("SELECT * FROM mytable");

выключить для запроса
$this->db->cache_off();
$query = $this->db->query("SELECT * FROM mytable");

включить снова
$this->db->cache_on();
$query = $this->db->query("SELECT * FROM mytable");

удалить кеш для одной страницы
$this->db->cache_delete()
---------------------------------------------------------------------------------------------------

Ресайз картинок

Есть 3 либы: GD/GD2, NetPBM, ImageMagick. Ватермарки работают только с GD/GD2, и она нужна для остальных либ.

$this->load->library('image_lib');
$this->image_lib->resize()
$this->image_lib->crop()
$this->image_lib->rotate()
$this->image_lib->watermark()
$this->image_lib->clear()

Проверять результат так
if ($this->image_lib->resize()) {
    echo 'ok';
} else {
    echo $this->image_lib->display_errors();
}

Сброс всех параметров обработки. Вызывать если проходим картинки в цикле
$this->image_lib->clear();


Создание тумбинашки
$config['image_library'] = 'gd2';

//путь до картинки
$config['source_image'] = '/path/to/image/mypic.jpg';

{
//сохранить оригинал, и создать копию сюда
$config['new_image'] = '/path/to/new_image.jpg';

//сохранить оригинал, и создать миниатюру с именем файла с постфиксом оригинал_thumb.jpg
$config['create_thumb'] = TRUE;
}

//сохранять пропорции
$config['maintain_ratio'] = TRUE;

//размер картинки
$config['width'] = 100;
$config['height'] = 100;

$this->load->library('image_lib', $config);
$this->image_lib->resize();
---------------------------------------------------------------------------------------------------

Защита от XSS

Будет заменить грязь на [removed]
$this->load->library('security');
$data = $this->security->xss_clean($data);

Проверка файлов
if ($this->security->xss_clean($file, TRUE)) {return true;}

Будет заменять всё на спецсимволы
$data = html_escape($data);

Указать в конфиге application/config/config.php глобально
$config ['global_xss_filtering'] = TRUE;

Автоматически используется xss_clean, если второй параметр true
$this->input->post('some_data', TRUE);
---------------------------------------------------------------------------------------------------

CSRF

Указать в конфиге application/config/config.php глобально
$config['csrf_protection'] = TRUE;

Автоматически работает с form_open(). Если не работаем с form_open() то можно вручную:
$csrf = [
    'name' => $this->security->get_csrf_token_name(),
    'hash' => $this->security->get_csrf_hash()
];
<input type="hidden" name="<?=$csrf['name'];?>" value="<?=$csrf['hash'];?>">

По-умолчанию токены регенерируются каждый раз при отправке. Но могут регенерироваться по истечению cookie CSRF. Изменить можно в конфиге $config[ 'csrf_regenerate' ]  =  TRUE;
---------------------------------------------------------------------------------------------------

Security Helper

загрузка хелпера
$this->load->helper('security');

xss_clean() - Обеспечивает фильтрацию взлома межсайтовых скриптов.
sanitize_filename() - Обеспечивает защиту от обхода каталога.
strip_image_tags() - Удаляет теги изображений из строки. Он оставляет URL изображения в виде обычного текста.
encode_php_tags() - Преобразует теги PHP в сущности. Примечание. Если вы используете функцию фильтрации XSS, она делает это автоматически.

Security Class

$this->security->xss_clean() - Для фильтрации данных через фильтр XSS (обычно фильтруются POST и COOKIE).
Если вы хотите, чтобы фильтр запускался автоматически каждый раз, когда он встречает данные POST или COOKIE:
application/config/config.php
$config['global_xss_filtering'] = TRUE;

$this->security->xss_clean($file, TRUE) - Необязательный второй параметр позволяет использовать эту функцию для проверки изображений на предмет возможных атак XSS.

$this->security->sanitize_filename() - Принимая имена файлов от пользовательского ввода, лучше всего их санировать, чтобы предотвратить обход каталога. Если для пользовательского ввода допустимо включать относительные пути, вы можете установить второй необязательный параметр в true.

Вы можете включить защиту csrf:
application/config/config.php
$config['csrf_protection'] = TRUE;

Если вы используете помощник по формам, функция form_open () автоматически вставит скрытое поле csrf в ваши формы.
---------------------------------------------------------------------------------------------------
register_globals = off - отключить глобальные переменные
error_reporting = 0 (или ENVIRONMENT = production) - отключить отображение ошибок
magic_quotes_runtime - отключить
---------------------------------------------------------------------------------------------------

Ошибка "CodeIgniter Too Many Connection"

Ошибка возникает, если ваши сценарии открывают постоянные подключения, которые не закрываются, даже если сценарий завершается. Постоянные соединения - это ссылки, которые не закрываются, когда заканчивается выполнение скрипта. Когда запрашивается постоянное соединение, PHP проверяет, существует ли уже идентичное постоянное соединение (которое оставалось открытым ранее) - если оно существует, то использует его. Если не существует, то создает новое.

Решение:

1. в настройках application/config/database.php:
$db['default']['pconnect'] = false;

2. в php.ini:
mysql.allow_persistent=Off

3. в MySQL:
кол-во соединенинй увеличить со 151 до 500
---------------------------------------------------------------------------------------------------

Profiling

$this->output->enable_profiler(TRUE);
//код
$this->output->enable_profiler(FALSE);

настройки
application/config/profiler.php
отключить
$config['config'] = FALSE;
$config['queries'] = FALSE;


Benchmarking

$this->benchmark->mark('point1_start');
//код
$this->benchmark->mark('point1_end');
echo $this->benchmark->elapsed_time('point1_start', 'point1_end');
echo  $this->benchmark->elapsed_time(); покажет общее время
echo $this->benchmark->memory_usage(); покажет использование памяти


Logging

настройки
application/config/config.php
отключить
$config['log_threshold'] = 0;
---------------------------------------------------------------------------------------------------

СЕО

application/config/config.php:
$config['meta'] = ['description' => '', 'keywords' => ''];

application/views/frontend/global/header.php:
<?= theme_seo() ?>

application/helpers/theme_headers_helper.php:
function theme_seo() {

    $headers_array = [];

    $CI =& get_instance();

    //description и keywords с контроллера
    $meta1 = $CI->temp->get('meta');

    //description и keywords с конфига
    $meta2 = $CI->config->item('meta');

    if (!empty($meta1['description'])) {
        $headers_array[] = '<meta name="description" content="' . $meta1['description'] . '">';
    } else {
        $headers_array[] = '<meta name="description" content="' . $meta2['description'] . '">';
    }

    if (!empty($meta1['keywords'])) {
        $headers_array[] = '<meta name="keywords" content="' . $meta1['keywords'] . '">';
    } else {
        $headers_array[] = '<meta name="keywords" content="' . $meta2['keywords'] . '">';
    }

    return implode("\n", $headers_array);
}

application/controllers/Home.php:
$this->temp->set(
    'meta',
	[
	    'description' => '123',
	    'keywords' => '123',
    ]
);