Валидация

HTML
<input type="text" class="form-control" id="password">
<input type="text" class="form-control" id="password_1">
<input type="text" class="form-control" id="password_2">

PHP
$this->form_validation->set_rules('password', ' ', 'trim|required|xss_clean|min_length[1]|callback_check_password');
$this->form_validation->set_rules('password_1', ' ', 'trim|required|xss_clean|min_length[1]');
$this->form_validation->set_rules('password_2', ' ', 'trim|required|xss_clean|min_length[1]|matches[password_1]');

проверка что старый пароль введен верно
public function check_password($password) {

получаем юзера из базы
$this->db->select('password_hash, password_code');
$this->db->where('id', $this->user->item('id'));
$query = $this->db->get('users');
$user = $query->row();

старый пароль введен верно
if ($user->password_hash == md5($user->password_code . $password . $user->password_code)) {
return true;
}

$this->form_validation->set_message('check_password', 'Старый пароль введен неверно');
return false;
}

-----------------------------------------------------------------------------------------------------------------------------------------

QueryBuilder

$this->db->select('field');
$this->db->select('field as field');
$this->db->select('field1, field2');
$this->db->select_sum('field');
$this->db->select(sum('field'));

$this->db->where('field', 0);
$this->db->where('field = 0');
$this->db->where(['field' => 0]);

$this->db->join('table2', 'table.id = table2.id');

$this->db->order_by('field');
$this->db->order_by('field', 'DESC');

$this->db->group_by('field');

$this->db->limit(1);
$this->db->limit(1, 10);

$this->db->escape($var);

$query = $this->db->get('table');

$result = $query->result(); // вся выборка
$result = $query->row(); // 1 строка
$result = $query->row()->field; // 1 строка 1 столбец


UPDATE
$this->db
->where('id', 100)
->update('table', ['field' => 0]);

UPDATE increment field
$this->db->where('id', 100);
$this->db->set('field', 'field+1', FALSE);
$this->db->update('table');
ИЛИ
"UPDATE `table` SET `field` = (`field` + " . $this->db->escape($field) . ") WHERE `id` = " . $this->db->escape($field);

для UPDATE запросов, сколько рядов затронуло
$this->db->affected_rows();

INSERT
$this->db->insert('addresses', $post);

INSERT IGNORE
$str = $this->db->insert_string('addresses', $data);
$str = preg_replace("~(INSERT INTO)~isu", 'INSERT IGNORE INTO', $str);
$this->db->query($str);
return $this->db->insert_id();

DELETE
$this->db->delete('addresses', [
'id' => $id,
'users_id' => $this->user->item('id'),
]);


ОТЛАДКА
$this->db->last_query();

-----------------------------------------------------------------------------------------------------------------------------------------

Залогиненность

администратор залогинен
$this->administrator->is_login();

юзер залогинен
$this->user->is_login();
$this->user->item('id');

-----------------------------------------------------------------------------------------------------------------------------------------

Сессии

положить в сессию
$this->session->userdata('property');

удалить из сессии
$this->session->unset_userdata('property');

всё что есть в сессии
$this->session->all_userdata();

-----------------------------------------------------------------------------------------------------------------------------------------

ОТЛАДКА КУК И СЕССИЙ

$aaa = $this->session->all_userdata();
var_dump('База ' . $aaa['session_id']);
print_r(!empty($aaa['basket']) ? $aaa['basket'] : '');


$bbb = unserialize($this->input->cookie('ci_session'));
var_dump('Кука ' . $bbb['session_id']);
print_r(!empty($bbb['basket']) ? $bbb['basket'] : '');

-----------------------------------------------------------------------------------------------------------------------------------------

Хелпер

Хелпер - небольшие функции, позволяющие избежать дублирования кода, вспомогательный файл с набором функций в определенной группе. Использование в моделях, представлениях, контроллерах, везде.

$this->load->helper('name_helper');
хелперы автозагружаются тут application/config/autoload.php:49

Библиотека

Библиотека - содержит классы и файлы, общение с БД. Библиотека это класс, который нужно сделать экземпляром класса CI и использовать как $this->...для вызова методов.

$this->load->library('name_library');
библиотеки автозагружаются тут application/config/autoload.php:27

$this->name_library->function();

Модель

$this->load->model('model_faq');
загрузка модели