Замена запятой на точку, в цифре
$post['amount'] = str_replace(',', '.', $post['amount']);
---------------------------------------------------------------------------------------------------

Прибавление 0.5% к числу
$amount = round($amount + (($amount * 0.5) / 100), 0);
---------------------------------------------------------------------------------------------------

TIMESTAMP из БД вывести в нужном формате
date('d.m.Y H:i:s', strtotime($order->created));
date('d.m.Y H:i:s', $order->created);
---------------------------------------------------------------------------------------------------

Вставка в базу времени "текущее время + 3 месяца"

1 метод. генерим время из php
$validate_expired = new DateTime('+ 3 month');
$validate_expired = $validate_expired->format('Y-m-d');
$this->model_user->update(['validate_expired' => ($value == 0) ? $validate_expired : NULL], $id);

2 метод. генерим время на стороне MYSQL
$validate_expired = 'NOW() + INTERVAL 3 MONTH';
$this->db->where('id', $id);
if ($value == 0) {
    $this->db->set('validate_expired', $validate_expired, false);
} else {
    $this->db->set('validate_expired', NULL);
}
$this->db->update('users');
---------------------------------------------------------------------------------------------------

Онлайн на сайте

статус онлайн/офлайн
в футере админки js скрипт раз в N минут обновляет время last_visit посылая post-ajax запрос

отображение время последнего захода
если now() > last_visit+5мин, то считаем что админ офлайн. и выводим время "бы в сети "now() - last_visit минут назад"
---------------------------------------------------------------------------------------------------

ИЗ МАССИВА ВЫБИРАЕМ IDs КАК МАССИВ
$orders_ids = array_map(function ($value) {
    return $value->id;
}, $orders);


СУММА МАССИВА ПО ОДНОМУ ИЗ ПОЛЕЙ
$sum = array_sum(array_map(function ($v) {
    return $v->sum;
}, $array));


ПОДСЧЕТ СУММЫ, В МАССИВЕ ОБЪЕКТОВ, ПО ОДНОМУ ИЗ ПОЛЕЙ
$schedules = [
  1 =>
    object(stdClass)[39]
      public 'users_id' => string '4'
      public 'schedules_id' => string '1'
      public 'anytime' => string '1'
  2 =>
    object(stdClass)[40]
      public 'users_id' => string '4'
      public 'schedules_id' => string '2'
      public 'anytime' => string '1'
];

Найдем сумму по полю anytime:
      array_reduce(
        $schedules,
        function ($total, $schedule) {
          return $total + $schedule->anytime;
        },
        0);
---------------------------------------------------------------------------------------------------

Защита от XSS

htmlspecialchars - Преобразует специальные символы в HTML сущности.
htmlentities - Преобразует все символы в HTML сущности. Идентична htmlspecialchars, но htmlentities преобразует все символы.
htmlspecialchars_decode - Преобразует сущности HTML обратно в символы. Обратная к htmlspecialchars.
html_entity_decode - Преобразует сущности HTML обратно в символы. Обратная к  htmlentities.
strip_tags - Удаляет HTML теги.
HTMLPurifier - библиотека безопастной очистки HTML.

Стандарт защиты
$name = strip_tags($_POST['name']);
$name = htmlentities($_POST['name'], ENT_QUOTES, "UTF-8");
$name = htmlspecialchars($_POST['name'], ENT_QUOTES);
---------------------------------------------------------------------------------------------------

Криптография

Случайные числа
rand($min, $max); - старая функция
mt_rand($min, $max); - новая функция
uniqid($prefix, true); - работает на основе текущего времени в микросекундах

пример
$salt = uniqid(mt_rand()); - соль
$combine = $email . $password . $salt;
$newpassword = md5($combine);

Хэширование (необратимое шифрование)
$sha1= sha1($string);
$sha1= hash('sha1', $string);

$sha256 = hash('sha256', $string);
$sha384 = hash('sha384', $string);
$sha512 = hash('sha512', $string);

HMAC
$hmac = hash_hmac('sha1', $string, 'secret');

sha1_file — 40символьный SHA1-хеш файла.
sha1 — SHA1-хеш строки.
hash — хеш-код.
password_hash — хеш пароля, является оберткой над crypt().
hash_hmac_file — хеш-код на основе ключа, используя метод HMAC и содержимое файла.

crypt($string, $salt); - на алгоритме DES, $salt делать случайным в каждой итерации. копирует $salt в начало возвращаемой строки. использует только первые 8 символов строки $string


1. Пароль+соль1, Пароль+соль2. У каждого юзера своя соль, и хранится в бд.
2. Вторая соль глобальная и одна на всех. Пароль+соль1+ГлобальнаяСоль. Хранится в конфиге.

MD5 generates a 128-bit hash value. You can use CHAR(32) or BINARY(16)
SHA-1 generates a 160-bit hash value. You can use CHAR(40) or BINARY(20)
SHA-224 generates a 224-bit hash value. You can use CHAR(56) or BINARY(28)
SHA-256 generates a 256-bit hash value. You can use CHAR(64) or BINARY(32)
SHA-384 generates a 384-bit hash value. You can use CHAR(96) or BINARY(48)
SHA-512 generates a 512-bit hash value. You can use CHAR(128) or BINARY(64)
Лучше CHAR

public function index() {

    //имя файла
    $filename = '1_1546716534';

    //соли
    var_dump(time());
    var_dump(date('U'));
    var_dump(rand());
    var_dump(mt_rand());
    var_dump(uniqid('', true));
    var_dump(uniqid(mt_rand()));

    echo '<hr>';

    //солим имя файла
    $result = $filename;

    //функции
    var_dump(md5($result));
    var_dump(hash('sha1', $result));
    var_dump(hash('sha256', $result));
    var_dump(hash('sha384', $result));
    var_dump(hash('sha512', $result));

    echo '<hr>';

    var_dump(hash_hmac('sha1', $result, 'secret'));
    var_dump(crypt($result, 'salt'));

    var_dump(password_hash($result, PASSWORD_DEFAULT));

    echo '<hr>';

    //в итоге берем
    var_dump(hash('sha256', $filename . time()));
}
---------------------------------------------------------------------------------------------------

DateTime

Установка даты
$date = new DateTime('2000-01-01');

Установка даты с часовым поясом
$date = new DateTime('2000-01-01', new DateTimeZone('Europa/Moscow'));

$date = new DateTime('2013-12-01');
$date->setTimezone(new DateTimeZone('Pacific/Chatham'));

Установка даты на 4 дня вперед
$date = new DateTime('+4 days');

Вывод форматированной даты
echo $date->format('d.m.Y');

Вывод timestamp
echo $date->getTimestamp();

Изменение даты, уже установленной при создании объекта
$date->setDate(2001, 2, 3);

Изменение времени, уже установленной при создании объекта
$date->setTime(14, 55);

Изменение timestamp, уже установленной при создании объекта
$date->setTimestamp(1385665999);

Изменения даты
$date->modify('+3 day');
$date->modify('+1 month');

Сравнение дат
$difference = $date1->diff($date2);
---------------------------------------------------------------------------------------------------

Сортировка дат по годам

$years = range(2012, 2025);
$case = array('10 September 2012', '10 September 2014', '10 September 2016', '11 September 2016');

foreach ($years as $v1) {
 echo $v1;
 foreach ($case as $v2) {
  if ($v1 == date('Y', strtotime($v2))) {
    echo '';
    echo $v2;
    echo '';
  }
 }
}
---------------------------------------------------------------------------------------------------

Трейты
Добавляют классу новое поведение. Можно использовать несколько трейтов в одном классе.

trait T1 {
 public function n1() {
  echo 'T1';
  $this->v = 1;
  echo $this->v;
 }
}

trait T2 {
 public function n2() {
  echo 'T2';
  $this->v = 2;
  echo $this->v;
 }
}


class N {

 use T1, T2; //подключение трейтов
 public $v = 3;

 public function nn() {
  echo 'N';
  echo $this->v;
 }
}

$a = new N;
$a->nn(); // N3
$a->n1(); // T11
$a->n2(); // T22
---------------------------------------------------------------------------------------------------

Пространства имен

index1.php
namespace A1;
class N {
 public function n() {
  echo __CLASS__ . ' : ' . __NAMESPACE__;
 }
}
echo __FILE__ . ' : ' . __NAMESPACE__;

index2.php
namespace A2;
class N {
 public function n() {
  echo __CLASS__ . ' : ' . __NAMESPACE__;
 }
}
echo __FILE__ . ' : ' . __NAMESPACE__;


index3.php
namespace A3;
include_once 'index1.php';
include_once 'index2.php';

$a1 = new \A1\N;
$a1->n();

$a2 = new \A2\N;
$a2->n();

echo __FILE__ . ' : ' . __NAMESPACE__ . '';

Элементы из одного пространства имён могут быть импортированы в другое, и использоваться в нём непосредственно.

use A1\N;
$a3 = new N;
$a3->n();

Вывод:
C:\YD\domains\test.loc\index1.php : A1
C:\YD\domains\test.loc\index2.php : A2
A1\N : A1
A2\N : A2
C:\YD\domains\test.loc\index3.php : A3
A1\N : A1
---------------------------------------------------------------------------------------------------

Замена переводов строки ['\n', '\r', '\r\n'] на <br> в textarea

- при сохранении в базу
str_replace(PHP_EOL, '<br>', $text);

- при выводе
str_replace('<br>', PHP_EOL, $text);
---------------------------------------------------------------------------------------------------

Первая буква из строки UTF-8
mb_substr($v->name, 0, 1);