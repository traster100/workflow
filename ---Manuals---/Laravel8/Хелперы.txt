Массивы и Объекты

Arr::accessible - проверка что это массив
Arr::add - добавить в массив новую пару ключ-значение если данный ключ не существует
Arr::collapse - сливает массивы в один массив
Arr::crossJoin - сливает массивы возвращая декартово произведение всех возможных вариантов
Arr::divide - разбивает массив на массив ключей и массив значений
Arr::dot - сливает многомерный массив в одиномерный массив используя точку
Arr::except - удаляет из массива пару ключ-значение, по ключу
Arr::exists - проверяет что ключ существует в массиве
Arr::first - вернет первый элемент, прошедший критерий истины, если не нашел то вернет значение по умолчанию
Arr::flatten - сливает многомерный массив в одиномерный массив (забирает все значения)
Arr::forget - удаляет пару ключ-значение, по ключу. использует точку как глубину захода в подмассивы
Arr::get - получает значение, по ключу. использует точку как глубину захода в подмассивы, если не нашел то вернет значение по умолчанию
Arr::has - проверяет, существует ли элемент, или ВСЕ переданные элементы
Arr::hasAny - проверяет, существует ли ЛЮБОЙ элемент, в переданных элементах
Arr::isAssoc - проверяет что массив ассоциативный
Arr::last - вернет последний элемент, прошедший критерий истины, если не нашел то вернет значение по умолчанию
Arr::only - вернет только указанные пары ключ-значение, по ключам
Arr::pluck - извлекает все значения, по ключу. из подмассивов. в итоговом массиве ключами могут быть другие значения
Arr::prepend - добавить элемент или пару ключ-значение, в начало массива
Arr::pull - возвращает и удаляет пару ключ-значение, по ключу. если ключа нет то вернет значение по умолчанию
Arr::query - преобразует массив в строку запроса query string
Arr::random - возвращает случайное значение из массива. можно указать колво возвращаемых значений
Arr::set - установка значения, по ключу. используя точку чтобы добраться вглубь вложенных подмассивов
Arr::shuffle - рандомно перемешать
Arr::sort - сортировка по значению. сортировка в Замыкании
Arr::sortRecursive - рекурсивная сортировка
Arr::where - фильтрует массив используя Замыкание
Arr::wrap - оборачивает значение в массив
--------------------

data_fill - заполняет значениями, по ключу, используя точки. внутри подмассивов. если его там нет. если есть то не перезапишет
data_get - извлекает значения, по ключу, используя точки. внутри подмассивов. если ключ не найден, вернет значение по умолчанию
data_set - заполняет значениями, по ключу, используя точки. внутри подмассивов. если оно там есть то перезапишет. если заполнить только то, что не существует, то 4й аргумент в false

head - вернет первый элемент массива
last - вернет последний элемент массива
--------------------

Пути

app_path - путь до /app
base_path - путь до /domain.loc
config_path - путь до /config
database_path - путь до /database
mix - путь до mix файла
public_path - путь до /public
resource_path - путь до /resources
storage_path - путь до /storage
--------------------

Строки

__ - перевод строки из языкового файла. по ключу или фразе
class_basename - вернет имя класса удалив неймспейс
e - запускает PHP htmlspecialchars с double_encode в true
preg_replace_array - последовательная замена в строке по шаблону регулярки, но замены в виде массива

Str::after - в строке вернёт всё, после указанной подстроки
Str::afterLast - в строке вернёт всё, после последнего вхождения указанной подстроки
Str::ascii - строку в ASCII
Str::before - в строке вернёт всё, до указанной подстроки
Str::beforeLast - в строке вернёт всё, до последнего вхождения указанной подстроки
Str::between - вернет часть строки между двумя подстроками
Str::camel - преобразует camel_case в CamelCase
Str::contains - проверит содержит ли строка, подстроку (или любую подстроку из массива подстрок). регистр важен
Str::containsAll - проверит содержит ли строка, все подстроки из массива подстрок. регистр важен
Str::endsWith - проверит, является ли подстрока (или любая подстрока из массива подстрок), концом строки
Str::finish - добавит в конец строки, подстроку. если ее еще там нет
Str::is - проверяет, соответствует ли строка, шаблону. в шаблоне есть знак *
Str::isAscii - проверит является ли строкой 7 bit ASCII
Str::isUuid - проверит является ли строка UUID
Str::kebab - преобразует CamelCase в camel-case
Str::length - длинна строки
Str::limit - обрежет строку до N символов. может добавить в конец троеточие
Str::lower - строку в нижний регистр
Str::orderedUuid - генерирует timestamp first UUID
Str::padBoth - на основе PHP str_pad. оборачивает строку, подстроками с двух сторон
Str::padLeft - на основе PHP str_pad. оборачивает строку, подстроками слева
Str::padRight - на основе PHP str_pad. оборачивает строку, подстроками справа
Str::plural - преобразует единственное число во множественное. работает только для англ. можно передать колво объектов для правильности
Str::random - случайная строка заданной длинны. на основе PHP random_bytes
Str::replaceArray - заменяет заполнители (?) в строке, последовательно, используя массив подстрок для замен
Str::replaceFirst - заменяет первое вхождение в строке, на подстроку
Str::replaceLast - заменяет последнее вхождение в строке, на подстроку
Str::singular - преобразует множественное число в единственное. работает только для англ
Str::slug - генерирует слуг (slug) из строки. можно указать разделитель для слов
Str::snake - преобразует CamelCase в camel_case
Str::start - добавляет подстроку в начало, в строке. если этой подстроки там нет
Str::startsWith - проверит, является ли подстрока (или любая подстрока из массива подстрок), началом строки
Str::studly - преобразует camel_case в CamelCase
Str::substr - возвращает часть строки с индекса N и длинной M
Str::title - делает все слова строки с большой буквы
Str::ucfirst - делает первый символ строки с большой буквы
Str::upper - делает все символы большими
Str::uuid - генерирует UUID версии 4
Str::words - обрежет строку до N слов. может добавить в конец троеточие
--------------------

trans - перевод строки из языкового файла. по ключу
trans_choice - перевод строки из языкового файла с интонацией (числом для глаголов множественного числа). по ключу
--------------------

Свободные строки

ооп интерфейс с цепочками вызовов

after - в строке вернёт всё, после указанной подстроки
afterLast - в строке вернёт всё, после последнего вхождения указанной подстроки
append - добавит подстроку к строке, с конца
ascii - строку в ASCII

basename - вернет имя класса удалив неймспейс, или просто последнюю часть из строки а/b/c, или указанную подстроку
before - в строке вернёт всё, до указанной подстроки
beforeLast - в строке вернёт всё, до последнего вхождения указанной подстроки

camel - преобразует camel_case в CamelCase
contains - проверит содержит ли строка, подстроку (или любую подстроку из массива подстрок). регистр важен
containsAll - проверит содержит ли строка, все подстроки из массива подстрок. регистр важен

dirname - вернет родительскую папку, из строки которая является путем. можно указать какую родительскую папку по уровню вернуть

endsWith - проверит, является ли подстрока (или любая подстрока из массива подстрок), концом строки
exactly - проверит равны ли строки
explode - разбивает строку по разделителю, в массив (коллекцию)

finish - добавит в конец строки, подстроку. если ее еще там нет

is - проверяет, соответствует ли строка, шаблону. в шаблоне есть знак *
isAscii - проверит является ли строкой 7 bit ASCII
isEmpty - проверка что пустая строка
isNotEmpty - проверка что Непустая строка

kebab - преобразует CamelCase в camel-case

length - длинна строки
limit - обрежет строку до N символов. может добавить в конец троеточие
lower - строку в нижний регистр
ltrim - обрежет строку слева от пустых символов, или указанных символов

match - возвратит подстроку, которая соответствует регулярке
matchAll - возвратит массив подстрок, которые соответствует регулярке

padBoth - на основе PHP str_pad. оборачивает строку, подстроками с двух сторон
padLeft - на основе PHP str_pad. оборачивает строку, подстроками слева
padRight - на основе PHP str_pad. оборачивает строку, подстроками справа
plural - преобразует единственное число во множественное. работает только для англ. можно передать колво объектов для правильности
prepend - добавить подстроку, в начало строки

replace - заменяет подстроку на подстроку
replaceArray - заменяет заполнители (?) в строке, последовательно, используя массив подстрок для замен
replaceFirst - заменяет первое вхождение в строке, на подстроку
replaceLast - заменяет последнее вхождение в строке, на подстроку
replaceMatches - замена на подстроку по регулярке. может через Замыкание обрабатывая каждую подмаску
rtrim - обрежет строку справа от пустых символов, или указанных символов

singular - преобразует множественное число в единственное. работает только для англ
slug - генерирует слуг (slug) из строки. можно указать разделитель для слов
snake - преобразует CamelCase в camel_case
split - разбивает строку на массив подстрок, используя регулярки. аналог explode
start - добавляет подстроку в начало, в строке. если этой подстроки там нет
startsWith - проверит, является ли подстрока (или любая подстрока из массива подстрок), началом строки
studly - преобразует camel_case в CamelCase
substr - возвращает часть строки с индекса N и длинной M

title - делает все слова строки с большой буквы
trim - обрежет строку с обоих сторон от пустых символов, или указанных символов

ucfirst - делает первый символ строки с большой буквы
upper - делает все символы большими

when - вызывает Замыкание, если условие истинно, и другое замыкание если условие ложно
whenEmpty - вызывает Замыкание, если строка пуста. Замыкание может вернуть значение
words - обрежет строку до N слов. может добавить в конец троеточие
--------------------

Урлы

action - генерирует урл для контроллер+действие+параметры роута
asset - генерирует урл для ресурса типа картинки итд. в .env установить ASSET_URL
route - генерирует абсолютный урл для именованного роута. можно передать параметры. можно относительный урл
secure_asset - генерирует урл для ресурса типа картинки итд. используя HTTPS
secure_url - генерирует полный урл HTTPS для заданного пути
url - генерирует полный урл для заданного пути. еще есть url()->current(), url()->full(), url()->previous()
--------------------

Разное

abort - генерация HTTP исключения с кодом ошибки, мессагой, заголовками
abort_if - генерация HTTP исключения с кодом ошибки, мессагой, заголовками. если условие true
abort_unless - генерация HTTP исключения с кодом ошибки, мессагой, заголовками. если условие false
app - вернет инстанс СК. можно передать класс или интерфейс чтобы разрешить его
auth - вернет инстанс Auth. альтернатива фасаду Auth. можно передать гуард к которому получить доступ

back - редирект назад
bcrypt - хеширует значение. альтернатива фасаду Hash
blank - проверяет значение на пустоту
broadcast - передаёт событие, слушателям

cache - вернет значение из кеша, или значение по умолчанию. можно писать в кеш. можно указать колво секунд кеширования
class_uses_recursive - вернет все трейты для класса и родительского класса
collect - создаст коллекцию из переданных значений
config - получить или установить значение из конфига (файлов конфига) в формате имяфайла.ключ. можно значения по умолчанию
cookie - создать куку
csrf_field - генерирует скрытое html поле с токеном
csrf_token - получить токен

dd - аналог var_dump(); exit;
dispatch - добавляет задачу в очередь задач
dispatch_now - выполняет задачу немедленно
dump - аналог var_dump();

env - возвращает переменые окружения из .env
event - отправляет событие, слушателям

factory - создает модель фабрики для тестирования или посева
filled - проверяет значение на НЕпустоту

info - пишет инфу в журнал log. можно передать контекстные данные
logger - пишет инфу уровня debug в журнал log. можно передать контекстные данные
method_field - генерирует глаголы HTTP для форм в скрытое поле
now - инстанс времени Carbon для текущего времени
old - вернет старый ввод в форму, из сессии. flash ввод
optional - доступ к свойствам и методам, переданного объекта. принимает Замыкание
policy - вернет Политику переданного класса

redirect - генерация HTTP редиректа с кодом, заголовками. на путь, на именованный роут
report - сообщит об исключении используя ваш обработчик исключений
request - вернет объект запроса Request. или значение по ключу
rescue - выполнит переданное Замыкание и поймает все исключения. исключения будут переданы в ваш обработчик report()
resolve - разрешает переданный класс или интерфейс, в СК
response - создаст объект ответа Response
retry - выполняет Замыкание N раз через M сек

session - получить или установить значения сессии

tap - принимает значение и Замыкание. и внутри Замыкания манипуляции
throw_if - генерит исключение если условие true
throw_unless - генерит исключение если условие false
today - инстанс времени Carbon для текущего времени
trait_uses_recursive - вернет все трейты для трейта
transform - выполняет Замыкание для переданного значения. если значение пустое то вернет значение по умолчанию

validator - создаст инстанс Validator. альтернатива фасаду Validator
value - вернет переданное значение. или результат работы Замыкания
view - вернет инстанс View

with - вернет переданное значение. или результат работы Замыкания