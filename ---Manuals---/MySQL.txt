Консольные команды

Подключение
mysql --host=127.0.0.1 --port=3310 --user=myusername --password=mypassword


Экспорт бд->файл.sql
mysqldump --host=127.0.0.1 --port=3310 --user=myusername --password=mypassword mydbname > /var/www/mydbname.sql

Экспорт бд->файл.zip
mysqldump --host=127.0.0.1 --port=3310 --user=myusername --password=mypassword mydbname | gzip > /var/www/mydbname.gz

Импорт файл.sql->бд
mysqldump --host=127.0.0.1 --port=3310 --user=myusername --password=mypassword mydbname < /var/www/mydbname.sql

Импорт файл.zip->бд
gunzip < /var/www/mydbname.gz | mysql --host=127.0.0.1 --port=3310 --user=myusername --password=mypassword mydbname


show databases; - посмотреть все базы
show tables from mydbname; - посмотреть все таблицы базы
show columns from mytable; - посмотреть все поля таблицы
use mydbname; - выбор базы
drop database mydbname; - удаление базы
create database mydbname; - создание базы

Смена пароля юзера
SET PASSWORD FOR user1@host1=PASSWORD('password1');
UPDATE user1 SET PASSWORD=PASSWORD('password1') WHERE user='user1'; FLUSH PRIVILEGES;
---------------------------------------------------------------------------------------------------

Работа со временем

Флаги для INTERVAL
- DAY_MINUTE - 'DAYS HOURS:MINUTES'
- DAY_HOUR - 'DAYS HOURS'
- '5 YEAR', '5 MONTH', '5 DAY', '5 HOUR', '5 MINUTE'

SELECT TIMESTAMP('2010-10-10 10:10:10') + INTERVAL '1 1:1' DAY_MINUTE;
SELECT TIMESTAMP('2010-10-10 10:10:10') + INTERVAL CONCAT(1, ' ', 1, ':', 1) DAY_MINUTE;

WHERE NOW() > (`created` + INTERVAL 5 HOUR)
WHERE NOW() > (TIMESTAMP(`created`) + INTERVAL 5 HOUR)
WHERE DATE(`created`) BETWEEN '2016-10-13' AND '2016-10-14'
WHERE UNIX_TIMESTAMP(`created`) BETWEEN 1493510400 AND 1494510400;

TIMESTAMP
TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP; - при вставке NULL вставиться текущая дата. автоапдейта нет.
TIMESTAMP NOT NULL DEFAULT '2000-01-01 01:01:01'  - при вставке NULL вставится '2000-01-01 01:01:01'. обновится при обновлении строки.

Можно установить
DEFAULT NULL
DEFAULT 0
DEFAULT '2000-01-01 01:01:01'
DEFAULT CURRENT_TIMESTAMP
ON UPDATE CURRENT_TIMESTAMP
DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
---------------------------------------------------------------------------------------------------

Типы полей

Для IPV4 адреса
- varchar(15) и сохранять строки в виде '127.0.0.1'.
- int(4) UNSIGNED (это обязательно) и сохранять в виде числа 3229614095 и преобразовывать через php ip2long() / long2ip(), или mysql inet_aton() / inet_ntoa().
Примеры
select inet_ntoa(3229614095); // вернет 192.128.0.15
select inet_aton('192.128.0.15'); // вернет 3229614095

Для IPV6 адреса
- binary(16) и преобразовывать через mysql inet_pton().

Для времени 00:00
поле типа TIME
SELECT TIME_FORMAT (foo_hour, '% H:% i');

Для датывремени с автоматической вставкой
`created` TIMESTAMP, NOT NULL, CURRENT_TIMESTAMP;
формат 'YYYY-MM-DD HH:MM:SS'

Для датывремени
`created` TIMESTAMP

Для цен
`price` INT, NOT NULL, 0 - целое
`price` DECIMAL(12,2), NOT NULL, 0 - с запятой

Для больших чисел
`order_id` BIGINT(20)
UNSIGNED - для целых типов, когда нужны только положительные значения, и диапазон удвоится.

ENUM
ENUM('value1', 'value2');
только строки
если установлено DEFAULT NULL то при вставке будет NULL, или 1я строка

SET('value1', 'value2');
только строки
gри выборке можно юзать LIKE и FIND_IN_SET
---------------------------------------------------------------------------------------------------

Выборка строго за прошлый день/час, или от текущего момента и до дня/часа назад

-строго прошлый день
SELECT * FROM `orders` WHERE DATE(`added`) = DATE(NOW())-INTERVAL 1 DAY;

-от текущего момента, и до дня назад
SELECT * FROM `orders` WHERE (`added` + INTERVAL 1 DAY) > NOW();
SELECT * FROM `orders` WHERE (TIMESTAMP(`added`) + INTERVAL 1 DAY) > NOW();

-строго за прошлый час
SELECT * FROM `orders` WHERE DAY(`added`) = DAY(NOW()) AND HOUR(`added`) = HOUR(NOW()-INTERVAL 1 HOUR);

-от текущего момента, и до часа назад
SELECT * FROM `orders` WHERE (`added` + INTERVAL 1 HOUR) > NOW();
---------------------------------------------------------------------------------------------------

Regexp

Выборка по регулярному выражению
$regexp = "CONVERT(LOWER(" . $field . ") USING utf8mb4) LIKE '%" . trim($word) . "%'";

Замена по регулярному выражению
SELECT * FROM `table` WHERE `field` LIKE '%text1%';
UPDATE `table` SET `field`= REPLACE(`field`, 'text1', 'text2');
---------------------------------------------------------------------------------------------------

Генерация случайного числа от X включительно, до Y невключительно (X <= R < Y)
SELECT FLOOR(X+RAND()*(Y–X));
SELECT FLOOR(5+RAND()*(10-5)); - рандомно от 5 до 9
---------------------------------------------------------------------------------------------------

Склеить строки при выборке
CONCAT_WS(' ', `family`, `name`, `patronym`);
---------------------------------------------------------------------------------------------------

Из почты получить только домен (из строки получить подстроку)

LOCATE('@', `email`) - из почты получим индекс собачки.
substring(`email`, LOCATE('@', `email`)+1) - из почты получим в подстроке только домен
---------------------------------------------------------------------------------------------------

Очистить таблицы с ключами

SET FOREIGN_KEY_CHECKS = 0;
TRUNCATE cities;
TRUNCATE countries;
TRUNCATE regions;
SET FOREIGN_KEY_CHECKS = 1;
---------------------------------------------------------------------------------------------------

Ключи в Workbench для дочерних таблиц делать
On Update CASCADE
On Delete SET NULL (но тогда нельзя ставить галку "NOT NULL" для таких полей)
---------------------------------------------------------------------------------------------------

Проблема mysql sql_mode=only_full_group_by

Настройка в my.cnf:
[mysqld]
sql_mode = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'

systemctl restart mysqld
---------------------------------------------------------------------------------------------------

Профилирование запросов для оценки производительности

Настройка в my.cnf:
[mysqld]
#включим лог медленных запросов.
slow-query-log = 1
#путь до файла.
slow-query-log-file = G:/soft/OpenServer/userdata/logs/slow-queries.log
#время запроса, продолжительностью более N секунд.
long_query_time = 1
#кол-во строк, более N.
min-examined-row-limit = 10
#запросы не использующие индексы.
log-queries-not-using-indexes

В лог упало:
#Time: 140826 10:42:39 (Время, когда был запущен запрос)
#User@Host: root[root] @ localhost [127.0.0.1]  Id: 1 (Пользователь, который выполнил запрос)
#Query_time: 0.086005  Lock_time: 0.086005 Rows_sent: 1  Rows_examined: 10 (Время работы запроса, Продолжительность блокировки, Количество выбранных строк, Количество проанализированных строк)

Оптимизация запросов для повышения производительности

EXPLAIN SELECT * FROM table1;

id – порядковый номер для каждого SELECT внутри запроса

select_type – тип запроса. Значения:
SIMPLE – простой запрос SELECT без подзапросов или UNION
PRIMARY – данный SELECT самый внешний запрос в JOIN
DERIVED – данный SELECT является частью подзапроса внутри FROM
SUBQUERY – первый SELECT в подзапросе
DEPENDENT SUBQUERY – подзапрос, который зависит от внешнего запроса
UNCACHABLE SUBQUERY – некешируемый подзапрос
UNION – второй или последующий SELECT в UNION
DEPENDENT UNION – второй или последующий SELECT в UNION, зависимый от внешнего запроса
UNION RESULT – результат UNION

table – таблица к которой относится выводимая строка

type – указывает как MySQL связывает используемые таблицы. Это одно из наиболее полезных полей, может сообщать об отсутствующих индексах. Значения:
System – таблица имеет только одну строку.
Const – таблица имеет только одну соответствующую строку, которая проиндексирована. Это наиболее быстрый тип соединения потому, что таблица читается только один раз и значение строки может восприниматься при дальнейших соединениях как константа.
Eq_ref – все части индекса используются для связывания. Используемые индексы PRIMARY KEY или UNIQUE NOT NULL. Это еще один наилучший возможный тип связывания.
Ref – все соответствующие строки индексного столбца считываются для каждой комбинации строк из предыдущей таблицы. Этот тип соединения для индексированных столбцов выглядит как использование операторов = или < = >.
Fulltext – соединение использует полнотекстовый индекс таблицы.
Ref_or_null – то же самое, что и ref, но также содержит строки со значением null для столбца.
Index_merge – соединение использует список индексов для получения результирующего набора. Столбец key вывода команды EXPLAIN будет содержать список использованных индексов.
Unique_subquery – подзапрос IN возвращает только один результат из таблицы и использует первичный ключ.
Index_subquery – тоже, что и предыдущий, но возвращает более одного результата.
Range – индекс, использованный для нахождения соответствующей строки в определенном диапазоне, обычно, когда ключевой столбец сравнивается с константой, используя операторы вроде: BETWEEN, IN, >, >=, etc.
Index – сканируется все дерево индексов для нахождения соответствующих строк.
All – Для нахождения соответствующих строк используются сканирование всей таблицы. Это наихудший тип соединения и обычно указывает на отсутствие подходящих индексов в таблице.

possible_keys – показывает индексы, которые могут быть использованы для нахождения строк в таблице. На практике они могут использоваться, а могут и не использоваться. Фактически, этот столбец может сослужить службу в оптимизации запросов, т.к значение NULL указывает на то, что не найдено ни одного подходящего индекса.

key – указывает на использованный индекс. Этот столбец может содержать индекс, не указанный в столбце possible_keys. В процессе соединения таблиц оптимизатор ищет наилучшие варианты и может найти ключи, которые не отображены в possible_keys, но являются более оптимальными для использования.

key_len – длина индекса, которую оптимизатор MySQL выбрал для использования. Например, значение key_len, равное 4, означает, что памяти требуется для хранения 4 знаков.

ref – указываются столбцы или константы, которые сравниваются с индексом, указанным в поле key. MySQL выберет либо значение константы для сравнения, либо само поле, основываясь на плане выполнения запроса.

rows – отображает число записей, обработанных для получения выходных данных. Это еще одно очень важное поле, которое дает повод оптимизировать запросы, особенно те, которые используют JOIN’ы и подзапросы.

10. Extra – содержит дополнительную информацию, относящуюся к плану выполнения запроса. Такие значения как “Using temporary”, “Using filesort” и т.д могут быть индикатором проблемного запроса. С полным списком возможных значений вы можете ознакомиться здесь

https://habr.com/ru/post/211022

Лог медленных запросов MySQL
1. Включить в настройках
2. Потом образуется файл логов тут /var/lib/mysql-5.7/mysql-5-slow.log
3. Потом отсортировать топ-10 медленных запросов, по результатам анализа логов:
mysqldumpslow -s c -t 10 /var/lib/mysql-5.7/mysql-5-slow.log > /var/www/myusername/data/www/slowlog/top10.log
---------------------------------------------------------------------------------------------------

Кодировка сервера

[client]
default-character-set=utf8

[mysql]
default-character-set=utf8

[mysqld]
collation-server = utf8_unicode_ci
init-connect='SET NAMES utf8'
character-set-server = utf8
-------------------------------------------------

Кодировка таблиц MySQL

В базе таблицы в разных кодировках: utf8_unicode_ci и utf8_general_ci

utf8mb4_general_ci - упрощенный набор правил сортировки
utf8mb4_unicode_ci - основан на официальных правилах Unicode

По степени лучшести
utf8_general_ci хуже всего
utf8_unicode_ci лучше
utf8mb4_general_ci
utf8mb4_unicode_ci
utf8mb4_unicode_ci_520
utf8mb4_unicode_ci_0900

Тесты скорости MySQL 5.7
utf8mb4_general_ci - быстрее
utf8mb4_unicode_ci - медленнее

Тесты скорости MySQL 8.0
utf8mb4_general_ci и utf8mb4_unicode_ci одинаково

Смена кодировки через SQL-запросы
1. Сделать бекап БД
2. Установить значение по-умолчанию для БД и для новых таблиц
ALTER DATABASE databasename CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
3. Преобразовать все таблицы в этой БД
ALTER TABLE tablename CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

Смена кодировки через HeidiSQL
БД->Maintenance->Bulk table editor:
Change default collation - utf8mb4_unicode_ci
Convert to charset - UTF-8 Unicode (utf8mb4)
---------------------------------------------------------------------------------------------------

INSERT
INSERT IGNORE INTO table1 (col1, col2) VALUES (value1, DEFAULT) ON DUPLICATE KEY UPDATE col2=value; - стандарт SQL
INSERT IGNORE INTO table1 SET col1={value|DEFAULT}, col2={value|DEFAULT}] ON DUPLICATE KEY UPDATE col2=value; - синтаксис MySQL
INSERT IGNORE INTO table1 (col1, col2) VALUES (value, value), (value, value); - вставка сразу много значений

IGNORE - не будут вставлены строки с неуникальными значениями в столбцах PRIMARY или UNIQUE. И эти строки не будут заменены или изменены. Без указания IGNORE вставка автоматом прекратиться на первом дубликате.
ON DUPLICATE KEY UPDATE - строки с неуникальными значениями в столбцах PRIMARY или UNIQUE обновят существующие. Дубли обновятся в нужных полях, но при вставке с обновлением id отдаст 0, поэтому его получать отдельным запросом.

UPDATE
UPDATE IGNORE table1 SET col1=value, col2=value WHERE ... ORDER BY;
IGNORE - не обновит дубликаты, но и дальнейшее обновление не будет прервано.

DISTINCT
SELECT DISTINCT col1, col2;
убирает дубликаты строк

ORDER BY
ORDER BY col1 ASC, col2 DESC;
Сортирует по возрастанию (ASC, по-умолчанию) или по убыванию (DESC). По любому колву столбцов - сначала по col1, а внутри него по col2.
ORDER BY BINARY col1; – с учетом регистра
ORDER BY RAND(); - получить случайное значение. Юзать совместно с DISTINC чтобы получить разные рандомные значения.

GROUP BY
GROUP BY col1, col2 [ASC|DESC];
Группирует строки у которых одинаковые значения в указанном столбце. Можно применить агрегатные функции и DISTINCT.

HAVING
HAVING [агрегатная функция] col1;
После GROUP BY. Если WHERE фильтрует строки по значениям в столбцах, то HAVING фильтрует группы образовавшиеся после GROUP BY.

DELETE
DELETE IGNORE FROM table1 WHERE ... ORDER BY;

TRUNCATE
TRUNCATE TABLE table1
Очищает таблицу.

LIMIT
LIMIT $count; - аналог LIMIT 0, $count; - с 1й строки выбрать $count строк.
LIMIT $offset, $count - с $offset-й строки невключительно, выбрать $count строк.
LIMIT $offset, -$count; LIMIT $offset, -1; - все строки с $offset-й и до конца.
---------------------------------------------------------------------------------------------------

Значения по-умолчанию для столбцов

Вставка NULL в столбец TIMESTAMP - вставится текущее значение датывремени.
Для столбцов UNIQUE ставить DEFAULT NULL, при вставке пустоты будет вставляться NULL, а он не подвержен неуникальности в отличие от пустоты.
Для столбца TIMESTAMP можно задать DEFAULT NOW()

Если для столбца не задан DEFAULT, то вставится:
NULL если столбец NULL
0 если столбец числовая
'' если столбец строковая
value+1 если столбец AUTO_INCREMENT
value1 если столбец ENUM
текущее датавремя если столбец TIMESTAMP
00-00-00 00:00:00 для остальных типов датывремени
---------------------------------------------------------------------------------------------------

Связи между таблицами

one-to-one non-identifying relationship (пунктирная)
one-to-one identifying relationship (сплошная)

one-to-many non-identifying relationship (пунктирная)
one-to-many identifying relationship (сплошная)

many-to-many identifying relationship (сплошная) (создает дополнительную таблицу)

Non-identifying relationship
Книга принадлежит владельцу, владелец может владеть несколькими книгами. Но книга может существовать и без владельца, и он может изменить владельца.
Первичный ключ родительского объекта входит в дочерний объект, но не как часть первичного ключа. Значение в дочерней таблице может быть NULL. Дочерний элемент может быть оставлен, даже если родитель удаляется.

Identifying relationship
Книга написана автором, автор мог написать несколько книг. Но книга не может существовать без автора.
Первичный ключ родительского объекта входит в первичный ключ дочернего объекта, как часть первичного ключа. Значение в дочерней таблице не может быть NULL. Дочерний элемент должен быть удален, если родитель удаляется.

Связь One to One
У родителя первичный ключ id. У дочерней таблица первичный ключ id. Сделать foreign key и связать их напрямую.

Foreign Key опции:
CASCADE - при удалении родителя удалит и потомков, при изменении ключа родителя, изменится ключ у потомков.
SET NULL - при обновлении или удалении родителя, ставит NULL у потомков.
NO ACTION или RESTRICT - не даст удалить родителя, пока есть потомки, не даст обновить ключи родителя.
---------------------------------------------------------------------------------------------------

Многотабличные запросы

SELECT * FROM table1, table2;
SELECT * FROM table1, table2 WHERE table1.col1 = table2.col2;
SELECT * FROM table1, (SELECT * FROM table2) AS table3;
SELECT * FROM table1 JOIN table2 ON (table1.col1 = table2.col2); - попадут только строки с совпадающим условием
SELECT * FROM table1 LEFT [RIGHT|FULL] JOIN table2 ON (table1.col1 = table2.col2) - попадут строки с совпадающим условием и все строки из таблицы table1

SELECT * FROM table1 LEFT JOIN table2 USING (col1,col2,col3);
эквивалентно
SELECT * FROM table1 LEFT JOIN table2 ON (table1.col1 = table2.col1 AND table1.col2 = table2.col2 AND table1.col3 = table2.col3);

В ON() можно юзать все что во WHERE.

Можно объединять много таблиц: SELECT * FROM table1 JOIN table2 ON() JOIN table3 ON();

SELECT * FROM table1 UNION ALL SELECT * FROM table2;
ALL - сохраняет дубликаты. Объединяет строки из каждого запроса в один набор под одни столбцы.

SELECT * FROM table1 INTERSECT SELECT * FROM table2;
Объединяет строки из каждого запроса в один набор под одни столбцы, и только те строки которые есть в обоих таблицах.

SELECT * FROM table1 EXCEPT SELECT * FROM table2;
Объединяет строки из каждого запроса в один набор под одни столбцы, и только те строки которые есть в первом запросе и нет во втором.

INTERSECT и EXCEPT можно реализовать через [NOT] EXISTS во WHERE.
---------------------------------------------------------------------------------------------------

Функции

SUM(col1) – сумма значений в столбце
AVG(col1) – средне-арифметическое значение в столбце
MIN(col1) – минимальное значение в столбце
MAX(col1) - максимальное значение в столбце
ABS(N) - модуль числа
SIGN(N) - знак числа (как -1, 0, +1)
MOD(N,M), N%M - остаток от деления
FLOOR(N) - наибольшее целое число
CEILING(N) - наименьшее целое число
ROUND(N) - правильное округление до знака N
ROUND(N,M) - округление числа N, до M десятичных знаков
EXP(N) - e в степени N
LN(N) - натуральный логарифм числа N
LOG(N,M) - если с одним M то натуральный логарифм, если с двумя то логарифм числа M, по базе N
LOG2(N) - логарифм числа N, по базе 2
LOG10(N) - логарифм числа N, по базе 10
POW(N,M), POWER(N,M) - N в степени M
SQRT(N) - квадратный корень
PI() - число Пи
COS(N) - N в радианах
SIN(N) - N в радианах
TAN(N) - N в радианах
ACOS(N) - арккосинус (величина, косинус которой равен N)
ASIN(N) - арксинус
ATAN(N) - арктангенс
COT(N) - котангенс
RAND([N]) - случайное float-число от 0 до 1 (или от N до 1)
LEAST(N,M,X,...) - отдает наименьшее значение
GREATEST(N,M,X,...) - отдает наибольшее значение
DEGREES(N) - радианы в градусы
RADIANS(N) - градусы в радианы
TRUNCATE(N,M) - усекает N, до M десятичных знаков. При M=0 число будет целым. При -M то число разрядов (слева) обнуляется
INET_NTOA(exp) - конвертит строки в IP-адреса
INET_ATON(exp) - конвертит IP-адреса в строки
---------------------------------------------------------------------------------------------------

Операторы

BETWEEN
Проверяет на диапазон, включительно.
exp1 [NOT] BETWEEN exp2 AND exp3;
равносильно
exp1 >= exp2 AND exp1 <= exp3;

IN
Проверяет на набор значений.
exp1 [NOT] IN (значения через запятую, подзапрос, вычисляемое выражение);

LIKE
Проверяет на соответствие шаблону.
exp1 [NOT] LIKE 'шаблон' [ESCAPE 'символ'];

Управляющие символы
_ - любой 1 символ
% - любая последовательность 0 и более символов

Поиск строки с нативным управляющим символом
LIKE '#_' ESCAPE '#'; - поиск строки '_'
LIKE '25#%' ESCAPE '#'; - поиск строки '25%'
Вообщем экранируем символы _ и % символом #
Если не указан escape-символ то он по умолчанию он \

REGEXP
Проверяет на соответствие шаблону.
exp1 [NOT] REGEXP [BINARY] 'регулярка';
Сравнивает без учета регистра
BINARY учитывает регистр
---------------------------------------------------------------------------------------------------

Колво и сумма чего-либо, с сортировкой по дням (TIMESTAMP)

SELECT DATE_FORMAT(`created`, '%d.%m.%Y') AS `created2`, COUNT(*) AS 'countorders2', SUM(`cashorders`) AS 'cashorders2'
FROM `orders`
GROUP BY `created2`
ORDER BY `created`;